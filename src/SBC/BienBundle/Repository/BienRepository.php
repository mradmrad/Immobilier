<?php

namespace SBC\BienBundle\Repository;

/**
 * BienRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BienRepository extends \Doctrine\ORM\EntityRepository
{

    public function getAll($type, $type2 = null, $rueID = null)
    {

        $query = $this->createQueryBuilder('b')
            ->leftJoin('b.agency', 'a')
            ->addSelect('a')
            ->leftJoin('b.createdBy', 'c')
            ->addSelect('c')
            ->leftJoin('b.equipements', 'e')
            ->addSelect('e')

            ->leftJoin('b.pictures', 'p')
            ->addSelect('p')
            ->leftJoin('b.typeBien', 't')
            ->addSelect('t')
            ->leftJoin('t.category', 'categ')
            ->addSelect('categ')
            ->leftJoin('b.commodites', 'com')
            ->addSelect('com')
            ->leftJoin('b.address', 'address')
            ->addSelect('address')
            ->where('b.type =?1')
            ->orderBy('b.creationDate','DESC')
            ->setParameters(array(1 => $type));

        if ($type2 != null) $query->orWhere('b.type = :t2')->setParameter('t2', $type2);

        // return for JSON
        if ($rueID != null) {
            $query->andWhere('address.rue = :id')->setParameter('id', $rueID);
            return $query->getQuery()->getArrayResult();
        }
        // return for list
        return $query->getQuery()->getResult();
    }

    public function getAllQuery($type, $type2 = null)
    {

        $query = $this->createQueryBuilder('b')
            ->leftJoin('b.agency', 'a')
            ->addSelect('a')
            ->leftJoin('b.createdBy', 'c')
            ->addSelect('c')
            ->leftJoin('b.equipements', 'e')
            ->addSelect('e')

            ->leftJoin('b.pictures', 'p')
            ->addSelect('p')
            ->leftJoin('b.typeBien', 't')
            ->addSelect('t')
            ->leftJoin('t.category', 'categ')
            ->addSelect('categ')
            ->leftJoin('b.commodites', 'com')
            ->addSelect('com')
            ->where('b.type =?1')
            ->setParameters(array(1 => $type));
        if ($type2 != null)
            $query
                ->orWhere('b.type = :t2')
                ->setParameter('t2', $type2);
        return $query;
    }

//    public function find($id, $lockMode = null, $lockVersion = null)
//    {
//
//        $query = $this->createQueryBuilder('b')
//            ->leftJoin('b.agency', 'a')
//            ->addSelect('a')
//            ->leftJoin('b.createdBy', 'c')
//            ->addSelect('c')
//            ->leftJoin('b.owners', 'owners')
//            ->addSelect('owners')
//            ->leftJoin('owners.client', 'client')
//            ->addSelect('client')
//            ->leftJoin('b.representants', 'representants')
//            ->addSelect('representants')
//            ->leftJoin('representants.client', 'clientt')
//            ->addSelect('clientt')
//            ->leftJoin('representants.representant', 'representant')
//            ->addSelect('representant')
//            ->leftJoin('b.procurations', 'procurations')
//            ->addSelect('procurations')
//            ->leftJoin('procurations.client', 'clienttt')
//            ->addSelect('clienttt')
//            ->leftJoin('procurations.representant', 'representantt')
//            ->addSelect('representantt')
//            ->leftJoin('b.equipements', 'e')
//            ->addSelect('e')
//            ->leftJoin('b.pictures', 'p')
//            ->addSelect('p')
//            ->leftJoin('b.typeBien', 't')
//            ->addSelect('t')
//            ->leftJoin('t.category', 'categ')
//            ->addSelect('categ')
//            ->leftJoin('b.address', 'address')
//            ->addSelect('address')
//            ->leftJoin('address.rue', 'rue')
//            ->addSelect('rue')
//            ->leftJoin('rue.localite', 'localite')
//            ->addSelect('localite')
//            ->leftJoin('localite.ville', 'ville')
//            ->addSelect('ville')
//            ->leftJoin('ville.gouvernorat', 'gouvernorat')
//            ->addSelect('gouvernorat')
//            ->leftJoin('b.contrats', 'co')
//            ->addSelect('co')
//            ->leftJoin('co.typeContrat', 'tco')
//            ->leftJoin('b.commodites', 'com')
//            ->addSelect('com')
//            ->addSelect('tco')
//            ->leftJoin('b.taches', 'ta')
//            ->addSelect('ta')
//            ->leftJoin('ta.typeTache', 'tya')
//            ->addSelect('tya')
//            ->leftJoin('ta.personnel', 'pers')
//            ->addSelect('pers')
//
//            ->leftJoin('b.meetings', 'meetings')
//            ->addSelect('meetings')
//            ->leftJoin('meetings.remindFors', 'remind_for')
//            ->addSelect('remind_for')
//            ->where('b.id = ?1')
//            ->getQuery();
//        $query->setParameters(array(1 => $id));
//
//        return $query->getOneOrNullResult();
//    }

    public function getAllTypes($rueID = null)
    {

        $query = $this->createQueryBuilder('b')
            ->leftJoin('b.agency', 'a')
            ->addSelect('a')
            ->leftJoin('b.createdBy', 'c')
            ->addSelect('c')
            ->leftJoin('b.equipements', 'e')
            ->addSelect('e')

            ->leftJoin('b.pictures', 'p')
            ->addSelect('p')
            ->leftJoin('b.typeBien', 't')
            ->addSelect('t')
            ->leftJoin('t.category', 'categ')
            ->addSelect('categ')
            ->leftJoin('b.commodites', 'com')
            ->addSelect('com')
            ->leftJoin('b.address', 'address')
            ->addSelect('address');

        // return for JSON
        if ($rueID != null) {
            $query->where('address.rue = :id')->setParameter('id', $rueID);
            return $query->getQuery()->getArrayResult();
        }
        // return for list
        return $query->getQuery()->getResult();
    }


}
