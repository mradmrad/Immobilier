<?php

namespace SBC\BienBundle\Repository;
use SBC\BienBundle\Entity\Goal;
use SBC\BienBundle\Entity\History;
use SBC\BienBundle\EventListener\HistoryService;
use SBC\PersonnelBundle\Entity\Personnel;
use SBC\TiersBundle\Entity\Client;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * HistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoryRepository extends \Doctrine\ORM\EntityRepository
{

    public function numberByTypeAndGoal($typeBien, Goal $goal, $rentOrSale =null)
    {
        $query = $this->createQueryBuilder('history')
            ->where('history.personnel = ?1 and history.creationDate >= ?2 and history.creationDate <= ?3  and history.description = ?4 and history.agency = ?5 ')
            ->setParameters( array(
                1 => $goal->getGoalFor()->getId(),
                2 => $goal->getBeginDate()->format('Y-m-d 00:00:00') ,
                3 => $goal->getFinishDate()->format('Y-m-d 23:59:59'),
                4 => $typeBien,
                5 => $goal->getGoalFor()->getAgency()->getId()
            ));

            if($rentOrSale != null)
                $query->andWhere('history.typeBien = :rentOrSale')
                    ->setParameter('rentOrSale', $rentOrSale)
        ;

        return count($query ->getQuery()->getResult());
    }



    public function numberByTypeAndPersonnel($typeBien, Personnel $personnel, $thisMonth = null)
    {
        $query = $this->createQueryBuilder('history')
            ->where('history.personnel = ?1  and history.description = ?2 and history.agency = ?3 ')
            ->setParameters( array(
                1 => $personnel->getId(),
                2 => $typeBien,
                3 => $personnel->getAgency()->getId()

            ));

        if($thisMonth != null)
            $query->andWhere('history.creationDate >= :start and history.creationDate <= :end')
                ->setParameter('start', new DateTime('now'))
                ->setParameter('end', new DateTime('now'))
            ;

        return count($query ->getQuery()->getResult());
    }

    public function filtredTaches(Personnel $personnel, $begin , $end)
    {


        $query = $this->createQueryBuilder('tache')
            ->leftJoin('tache.personnel' , 'p')
            ->leftJoin('tache.acquisition' , 'acquisition')
            ->leftJoin('tache.bien' , 'bien')
            ->leftJoin('tache.mandat' , 'mandat')
            ->addSelect('acquisition')
            ->addSelect('mandat')
            ->addSelect('bien')
            ->where('p = :personnel')
            ->setParameter('personnel' , $personnel);
        if ($begin != '')
        {
            $query->andWhere('tache.creationDate >= :begin')
                ->setParameter('begin' , $begin);
        }
        if ($end != '')
        {
            $query->andWhere('tache.creationDate <= :end')
                ->setParameter('end' , $end);
        }

        // return for list
        return $query->getQuery()->getArrayResult();
    }

    public function ClientHistory(Client $client)
    {


        $query = $this->createQueryBuilder('history')
            ->leftJoin('history.bien' , 'bien')
            ->leftJoin('history.requete' , 'requete')
            ->leftJoin('bien.owners' ,'owners')
            ->where('requete.client = :reqclient')
            ->orWhere('owners.client = :bienclient')
            ->setParameter('reqclient' , $client)
            ->setParameter('bienclient' , $client);


        // return for list
        return $query->getQuery()->getArrayResult();
    }


}
