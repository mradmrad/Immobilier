<?php

namespace SBC\PersonnelBundle\Repository;

use SBC\BienBundle\Entity\Bien;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * PersonnelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonnelRepository extends \Doctrine\ORM\EntityRepository
{

    public function find($id, $lockMode = null, $lockVersion = null)
    {
        $query = $this->createQueryBuilder('p')
            ->leftJoin('p.address', 'addr')
            ->addSelect('addr')
            ->leftJoin('p.agency', 'a')
            ->addSelect('a')
            ->leftJoin('p.taches', 'taches')
            ->addSelect('taches')
            ->leftJoin('taches.typeTache', 'type_tache')
            ->addSelect('type_tache')
            ->leftJoin('p.meetings', 'meetings')
            ->addSelect('meetings')
            ->where('p.id = ?1')
            ->setParameters(array(1 => $id));
        return $query->getQuery()->getOneOrNullResult();
    }

//    public function findAll()
//    {
//
//        $query = $this->createQueryBuilder('p')
//            ->from('SBC\UserBundle\Entity\User', 'user')
//            ->select('IDENTITY(user.personnel)')
//            ->where('user.enabled = 1');
//
//        $qb = $this->createQueryBuilder('personnel');
//
//        return $qb->where(
//            $qb->expr()->In('personnel.id', $query->getDQL())
//        )
//            ->leftJoin('personnel.address', 'addr')
//            ->addSelect('addr')
//            ->leftJoin('personnel.agency', 'a')
//            ->addSelect('a')
//            ->getQuery()->getResult();
//    }
    public function MyfindAll($myid)
    {

        $query = $this->createQueryBuilder('p')
            ->from('SBC\UserBundle\Entity\User', 'user')
            ->select('IDENTITY(user.personnel)')
            ->where('user.enabled = 1');
//        ->andWhere('user.id != '.$myid);

        $qb = $this->createQueryBuilder('personnel');

        return $qb->where(
            $qb->expr()->In('personnel.id', $query->getDQL())
        )
            ->leftJoin('personnel.address', 'addr')
            ->addSelect('addr')
            ->leftJoin('personnel.agency', 'a')
            ->addSelect('a')
            ->getQuery()->getResult();
    }

    public function getAllNotUsersQuery()
    {

        $qb2 = $this->createQueryBuilder('personnel')
            ->from('SBC\UserBundle\Entity\User', 'user')
            ->select('IDENTITY(user.personnel)');

        $qb = $this->createQueryBuilder('p');

        return $qb->where(
            $qb->expr()->notIn('p.id', $qb2->getDQL())
        )
            ->leftJoin('p.address', 'addr')
            ->addSelect('addr')
            ->leftJoin('p.agency', 'a')
            ->addSelect('a');
    }

    public function getStatsProfile($id)
    {

        $rows = $this->getEntityManager()->createQuery(
            "select count(bien.id) , bien.type from BienBundle:Bien  as bien  where  bien.createdBy =" . $id . "group by bien.type"
        )->getResult();

        $list = array();
        foreach ($rows as $key => $value) {
            $list[$value['type']] = $value[1];
        }

        return $list;

    }

    public function meetingsPersonnels ()
    {

        $query = $this->createQueryBuilder('personnel')
            ->leftJoin('personnel.user', 'user')
            ->addSelect('user')
            ->where('user.enabled = 1')
            ->getQuery();

        return $query->getResult();
    }

}
